#!/bin/bash

mkdir -p pokemon_data
pokemons=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
pids=()  # Store background process PIDs

fetch_pokemon() {
    local pokemon=$1
    echo "Fetching data for $pokemon..."
    curl -s "https://pokeapi.co/api/v2/pokemon/$pokemon" -o "pokemon_data/${pokemon}.json"

    if [ $? -eq 0 ]; then
        echo "Saved data to pokemon_data/${pokemon}.json ✅"
    else
        echo "Failed to fetch $pokemon data" >> errors.txt
    fi
}

# Start fetching in background and collect PIDs
for pokemon in "${pokemons[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)  # Store the PID of the background process
done

# Optional: simulate timeout/cleanup logic
# Wait max 10 seconds before force-killing any still-running jobs
( sleep 10; for pid in "${pids[@]}"; do kill -0 $pid 2>/dev/null && kill $pid && echo "Killed process $pid due to timeout"; done ) &

# Wait for all background fetch jobs to complete
for pid in "${pids[@]}"; do
    wait "$pid"
done

echo "✅ All data fetched in parallel and handled with process control."
